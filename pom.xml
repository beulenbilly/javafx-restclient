<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright 2018 Rohit Awate.
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~      http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.rohitawate</groupId>
	<artifactId>Everest</artifactId>
	<version>Alpha-1.3</version>
	<packaging>jar</packaging>
	<properties>
		<version.javafx>16-ea+7</version.javafx>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<main.class>com.rohitawate.everest.Main</main.class>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>${version.javafx}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>${version.javafx}</version>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.jfoenix/jfoenix -->
		<dependency>
			<groupId>com.jfoenix</groupId>
			<artifactId>jfoenix</artifactId>
			<version>9.0.10</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<version>2.26</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-multipart</artifactId>
			<version>2.26</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>2.26</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.9.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.21.0.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>24.1-jre</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.fxmisc.richtext/richtextfx -->
		<dependency>
			<groupId>org.fxmisc.richtext</groupId>
			<artifactId>richtextfx</artifactId>
			<version>0.11.0</version>
		</dependency>
		<!--		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>RELEASE</version>
			<scope>test</scope>
		</dependency>-->
	</dependencies>

	<build>
		<plugins>
			<!--			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					 Run shade goal on package phase
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								 add Main-Class to manifest file
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>${main.class}</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>-->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<configuration>
					<mainClass>${main.class}</mainClass>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.openjfx</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>0.0.8</version>
				<configuration>
					<mainClass>${main.class}</mainClass>
					<options>
						<option>--add-opens</option>
						<option>javafx.graphics/javafx.css=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.base/com.sun.javafx.runtime=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.base/com.sun.javafx.binding=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.base/com.sun.javafx.event=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED</option>
						<option>--add-opens</option>
						<option>javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED</option>
						<option>--add-exports</option>
						<option>javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.controls/com.sun.javafx.scene.control=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.base/com.sun.javafx.binding=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.base/com.sun.javafx.event=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.stage=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.scene=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.scene.text=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.geom=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.util=com.jfoenix</option>
						<option>--add-exports</option>
						<option>javafx.graphics/com.sun.javafx.scene.traversal=com.jfoenix</option>
					</options>
				</configuration>
				<executions>
					<execution>
						<!-- Default configuration for running -->
						<!-- Usage: mvn clean javafx:run -->
						<id>default-cli</id>
					</execution>
					<execution>
						<!-- Configuration for manual attach debugging -->
						<!-- Usage: mvn clean javafx:run@debug -->
						<id>debug</id>
						<configuration>
							<options>
								<option>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=localhost:8000</option>
							</options>
						</configuration>
					</execution>
					<execution>
						<!-- Configuration for automatic IDE debugging -->
						<id>ide-debug</id>
						<configuration>
							<options>
								<option>-agentlib:jdwp=transport=dt_socket,server=n,address=${jpda.address}</option>
							</options>
						</configuration>
					</execution>
					<execution>
						<!-- Configuration for automatic IDE profiling -->
						<id>ide-profile</id>
						<configuration>
							<options>
								<option>${profiler.jvmargs.arg1}</option>
								<option>${profiler.jvmargs.arg2}</option>
								<option>${profiler.jvmargs.arg3}</option>
								<option>${profiler.jvmargs.arg4}</option>
								<option>${profiler.jvmargs.arg5}</option>
							</options>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>